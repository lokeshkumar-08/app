import 'dart:ui';
import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.whiteA700,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(5.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: appTheme.whiteA70001,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(6.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      checkboxTheme: CheckboxThemeData(
        fillColor: MaterialStateColor.resolveWith((states) {
          if (states.contains(MaterialState.selected)) {
            return colorScheme.primary;
          }
          return colorScheme.onSurface;
        }),
        side: BorderSide(
          width: 1,
        ),
        visualDensity: const VisualDensity(
          vertical: -4,
          horizontal: -4,
        ),
      ),
      floatingActionButtonTheme: FloatingActionButtonThemeData(
        backgroundColor: appTheme.whiteA70001,
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: appTheme.gray40001,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: appTheme.black90002,
          fontSize: 16.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.black90002,
          fontSize: 14.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.black90002,
          fontSize: 12.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w400,
        ),
        displayMedium: TextStyle(
          color: colorScheme.primary,
          fontSize: 40.fSize,
          fontFamily: 'Libre Caslon Text',
          fontWeight: FontWeight.w700,
        ),
        displaySmall: TextStyle(
          color: appTheme.black90002,
          fontSize: 36.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w700,
        ),
        headlineSmall: TextStyle(
          color: appTheme.black90002,
          fontSize: 24.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w800,
        ),
        labelLarge: TextStyle(
          color: appTheme.black90002,
          fontSize: 12.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: TextStyle(
          color: appTheme.black90002,
          fontSize: 10.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: appTheme.red60001,
          fontSize: 8.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: appTheme.whiteA70001,
          fontSize: 20.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: appTheme.black90002,
          fontSize: 16.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: appTheme.black90002,
          fontSize: 14.fSize,
          fontFamily: 'Montserrat',
          fontWeight: FontWeight.w600,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFFF73658),
    primaryContainer: Color(0XFF1C1B1F),
    secondaryContainer: Color(0XFFFF4B26),

    // Error colors
    errorContainer: Color(0XFFE91611),
    onError: Color(0XFF616161),
    onErrorContainer: Color(0XFF0D0808),

    // On colors(text colors)
    onPrimary: Color(0XFF21003D),
    onPrimaryContainer: Color(0XFFA4A9B3),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber600 => Color(0XFFECB30F);

  // Black
  Color get black900 => Color(0XFF010101);
  Color get black90001 => Color(0XFF0C0A0A);
  Color get black90002 => Color(0XFF000000);

  // Blue
  Color get blueA200 => Color(0XFF4392F9);
  Color get blueA20001 => Color(0XFF4392F8);

  // BlueGray
  Color get blueGray100 => Color(0XFFD2D2D2);
  Color get blueGray10001 => Color(0XFFD9D9D9);
  Color get blueGray300 => Color(0XFF9CA4AB);
  Color get blueGray400 => Color(0XFF808488);
  Color get blueGray700 => Color(0XFF4C5059);
  Color get blueGray900 => Color(0XFF323232);
  Color get blueGray90001 => Color(0XFF17223B);
  Color get blueGray90002 => Color(0XFF263238);

  // DeepOrange
  Color get deepOrange300 => Color(0XFFFE735C);

  // Gray
  Color get gray100 => Color(0XFFF4F4F4);
  Color get gray10001 => Color(0XFFF3F3F3);
  Color get gray10002 => Color(0XFFFBF3F5);
  Color get gray10003 => Color(0XFFF2F2F2);
  Color get gray200 => Color(0XFFEBEBEB);
  Color get gray20001 => Color(0XFFE8E8E8);
  Color get gray300 => Color(0XFFDEDBDB);
  Color get gray30001 => Color(0XFFE0E0E0);
  Color get gray400 => Color(0XFFCACACA);
  Color get gray40001 => Color(0XFFC4C4C4);
  Color get gray40002 => Color(0XFFC7C7C7);
  Color get gray40003 => Color(0XFFBBBBBB);
  Color get gray50 => Color(0XFFF8F8F8);
  Color get gray500 => Color(0XFFA0A0A1);
  Color get gray50001 => Color(0XFFA6A6A6);
  Color get gray50002 => Color(0XFFA8A8A8);
  Color get gray50003 => Color(0XFFA8A8A9);
  Color get gray600 => Color(0XFF727272);
  Color get gray60001 => Color(0XFF828282);
  Color get gray60002 => Color(0XFF6E7179);
  Color get gray700 => Color(0XFF676767);
  Color get gray70001 => Color(0XFF575757);
  Color get gray900 => Color(0XFF222222);
  Color get gray90001 => Color(0XFF231F20);
  Color get gray90002 => Color(0XFF232327);

  // Grayc
  Color get gray2004c => Color(0X4CE7E7EB);
  Color get gray4006c => Color(0X6CC5C5C5);

  // Indigo
  Color get indigo600 => Color(0XFF3D4CA5);

  // Orange
  Color get orange100 => Color(0XFFF8D7B4);

  // Pink
  Color get pink300 => Color(0XFFF97189);
  Color get pink30001 => Color(0XFFFC6D86);

  // Red
  Color get red100 => Color(0XFFFFCCD4);
  Color get red600 => Color(0XFFEB3030);
  Color get red60001 => Color(0XFFEA3030);

  // White
  Color get whiteA700 => Color(0XFFFDFDFD);
  Color get whiteA70001 => Color(0XFFFFFFFF);

  // Yellow
  Color get yellow800 => Color(0XFFEFAD18);
  Color get yellow80001 => Color(0XFFEFAE1A);
}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
